package projectdata;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

public class parity {
	public static void createparity(ArrayList<Integer> data, int input, int P){
		int count=0;
		for(int i=0;i<data.size();i++) {
			if(data.get(i)==1) {count++;}
		}
		if(count%2==0) {
			//even parity
			if(input==0) {data.add(0);}
			//odd parity
			else {data.add(1);}
		}
		else {
			//even parity
			if(input==0) {data.add(1);}
			//odd parity
			else {data.add(0);}
		}
		//System.out.printf("%d\n",data.size());
		//checker
		for(int i=0;i<data.size();i++) {
			if(i==data.size()-1) {
				System.out.printf(" [%d]", data.get(i));
			}
			else {
				System.out.printf(" %d", data.get(i));
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public static void create2dparity(ArrayList<Integer> data, int input, int P) {
		int count=0;
		//In 2d array instead of turning it into an actual 2d array, I turned it into a complicated for loop to check a line of ArrayList
		int more = 1,cap=0,q;
		//FInd root without going into double sqrt
		for(int i=0;i<more;i++) {
			if(i*i==data.size()) {
				cap=i;
				break;
			}
			more++;
		}
		//cap should be 3 at this point if the input is 3.
		// horizonal checking
		int top = (cap+1)*cap;
		//top should give 4 when the input is 3
		int increase = cap+1; 
		//increase will be 4 is the input is 3
		for(int i=0;i<top;i=i+increase) {
			for(int j=i;j<cap;j++) {
				if(data.get(j)==1) {count++;}
			}
			//If it's not the last position
			if(cap!=top-1) {
				//It doesn't matter what we add here, we just need to increase 1 space in ArrayList
				data.add(0);
				for(q=data.size()-1;q>cap;q--) {
					data.set(q, data.get(q-1));
				}
				if(count%2==0) {
					//even 2d parity
					if(input==2) {data.set(q, 0);}
					//odd 2d parity
					else{data.set(q, 1);}
				}
				else {
					//even 2d parity
					if(input==2) {data.set(q, 1);}
					//odd 2d parity
					else{data.set(q, 0);}
				}
			}
			else {
				if(count%2==0) {
					//even 2d parity
					if(input==2) {data.add(0);}
					//odd 2d parity
					else{data.add(1);}
				}
				else {
					//even 2d parity
					if(input==2) {data.add(1);}
					//odd 2d parity
					else{data.add(0);}
				}
			}
			count=0;
			cap=cap+increase;
		}
			//vertical checking
			for(int i=0;i<increase;i++) {
				for(int j=i;j<data.size()-1;j=j+increase) {
					if(data.get(j)==1) {count++;}
				}
				if(count%2==0) {
					//even 2d parity
					if(input==2) {data.add(0);}
					//odd 2d parity
					else {data.add(1);}		
				}
				else {
					//even 2d parity
					if(input==2) {data.add(1);}
					//odd 2d parity
					else {data.add(0);}
				}
				count=0;
			}
			//show
			for(int i=0;i<data.size();i++) {
					if(i%increase==0) {
						System.out.printf("\n");
					}
					System.out.printf(" %d", data.get(i));
			}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public static void checkparity(ArrayList<Integer> data, int input) {
		int count=0;
		System.out.printf("\n");
		//even && odd
		if(input==0 || input==1) {
			for(int i=0;i<data.size();i++) {
				if(data.get(i)==1) {count++;}
			}
			for(int i=0;i<data.size();i++) {
				System.out.printf(" |");
				if(i==data.size()-1) {
					System.out.printf("\n");
				}
			}
			for(int i=0;i<data.size();i++) {
				System.out.printf(" %d", data.get(i));
			}
			if(count%2==0) {
				//even parity
				if(input==0) {
					System.out.println("\nDidn't detect any error through even parity bit checking");
				}
				//odd aprity
				else {
					System.out.println("\nError detected");
				}
			}
			else {
				//even parity
				if(input==0) {
					System.out.println("\nError detected");
				}
				//odd parity
				else {
					System.out.println("\nDidn't detect any error through even parity bit checking");
				}
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		//2d parity even && odd
		else if(input==2 || input==3) {
			//wrong will be turn to 1 if an error is detected.
			int cap=-1,row=-1,col=0,more=1,wrong=0;
			//FInd root without going into double sqrt
			for(int i=0;i<more;i++) {
				if(i*i==data.size()) {
					cap=i;
					break;
				}
				more++;
			}
			int[][] arr = new int[cap][cap]; 
			int pos=0;
			//check horizonally
			for(int i=0;i<cap;i++) {
				for(int j=0;j<cap;j++) {
					arr[i][j] = data.get(pos);
					pos++;
					if(arr[i][j]==1){count++;}
				}
				//even 2d parity
				if(count%2==1 && input==2) {
					row=i;
				}
				//odd 2d parity
				if(count%2==0 && input==3) {
					row=i;
				}
				count=0;
			}
			//check vertically
			for(int i=0;i<cap;i++) {
				for(int j=0;j<cap;j++) {
					if(arr[j][i]==1) {count++;}
				}
				//even 2d parity
				if(count%2==1 && input==2) {
					col=i;
					break;
				}
				//odd 2d parity
				if(count%2==0 && input==3) {
					col=i;
					break;
				}
				count=0;
			}
			//show
			if(row!=-1 && col!=-1) {
				System.out.printf(" Position of error detected : row %d ", row);
				System.out.printf("col %d", col);
			}
			else {
				System.out.printf("THE DATA WAS NOT INTERRUPTED.");
			}
			System.out.printf("\n");
			for(int i=0;i<cap;i++) {
				for(int j=0;j<cap;j++) {
					if(i==row && j==col) {
						System.out.printf("[%d]", arr[i][j]);
					}
					else {
						System.out.printf(" %d", arr[i][j]);
					}
				}
				System.out.printf("\n");
			}
		}
	}
}